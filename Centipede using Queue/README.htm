<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- saved from url=(0071)http://www.cs.utexas.edu/~dlessin/teaching/cs105_cpp/assignment_07.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">





  
  <title>CS 105 (C++): Assignment 7</title>
  

  
  
  

  
  </head><body>
CS 105 (C++)<br><br>

Assignment 7: Centipede<span style="font-weight: bold;"><br>
<img style="width: 256px; height: 330px;" alt="" src="./README_files/centipede.jpg" align="right" hspace="20" vspace="20"><br>
<br>
I. Overview</span><br>

<br>

In this assignment, you will implement a queue class template, to be
used in a simple centipede-style interactive display.&nbsp; In addition
to the use of a template, this project will require the implementation
of copy control as well as dynamic memory management.<br>

<br>

<div style="margin-left: 40px;"><span style="font-weight: bold;">Note</span>:
To allow you to focus on this week's C++ topics rather than on the
complexities of data structures, this project is designed around a
queue which has a <strong><em>fixed size</em></strong>.&nbsp; From its
first creation and throughout its entire existence, the queue will
contain exactly <code>QUEUE_SIZE</code> (specified below) elements.<br>
</div>

<br>

You will use the existing file <code>a7_main.cpp</code> (<a href="http://www.cs.utexas.edu/~dlessin/teaching/cs105_cpp/a7_main.cpp">download here</a>) to handle interaction and
display, and you will complete your <code>Queue</code> template
implementation entirely within the file <code>Queue.h</code>.&nbsp;
The given <code>a7_main.cpp</code> should not be modified; doing so
may cause your
code to work incorrectly during grading.<br>

<br>

Your implementation must meet the following requirements:<br>

<ul>

  <li><code>Queue.h</code> must properly use preprocessor directives to
prevent multiple inclusion.</li>
  <li>Each method of class template <code>Queue</code> must be defined
outside of the class declaration, but still within <code>Queue.h</code>.&nbsp;
(Because of the way templates are compiled, both the declaration and
the definition of the template must be in the same file.)</li>
  <li><code>Queue.h</code> must use a preprocessor directive to define <code>QUEUE_SIZE</code>
as <code>30</code>.</li>
  <li>Your Queue class template must include the following members
(where <code>Type</code> refers to the parameterized type of the
template):</li>
  <ul>
    <li>A private pointer to <code>Type</code>, which will point to a
dynamically allocated array of <code>Type</code> which is used for the
queue's internal storage.&nbsp; (This will be the only private member
and the only data member.)</li>
    <li>A default constructor, which allocates the array with size <code>QUEUE_SIZE</code>.</li>
    <li>A copy constructor.</li>
    <li>A destructor.</li>
    <li>An assignment operator.</li>
    <li>An access function called <code>pushAndPop</code>, which takes
a reference to a new item of type <code>Type</code> to be pushed onto
one end of the queue, and returns an item of type <code>Type</code>
that has been popped off the other end of the queue.&nbsp; (Note that
the queue size is not changed by this operation.)</li>
  </ul>
  <li>As an exercise in programming to specifications, the <code>Queue</code>
class template should contain exactly the members
specified, and no others.</li>
  <li>As always, proper handling of dynamic memory will be extremely
important because of the potential for damaging and hard-to-find
bugs.&nbsp; (In this assignment, the memory management is simpler than
in previous assignments, but must still be completed with great care.)<br>
  </li>
</ul>

Note: This assignment's <code>a7_main.cpp</code> file makes use of the
ncurses library for display, which requires the option <code>-lncurses</code>
(that's the letter <code>l</code>, not the number <code>1</code>) to
g++ during compilation, as shown here:<br>

<br>

<div style="margin-left: 40px;"><code>g++ a7_main.cpp -lncurses -o a7</code><br>
</div>

<br>

<span style="font-weight: bold;"><br>
II. Grading</span><br>

<br>

The following is a list of specific assignment requirements, along
with the grade value for each (out of a total of 10 points for the
assignment).<br>

<ul>


  <li><span style="text-decoration: underline;">Minimum Requirements</span></li>
  <ul>
    <li><code>Queue</code> functions properly as used by <code>a7_main.cpp</code>.</li>
    <li>Your work must be submitted in the file <code>Queue.h</code><code></code>.</li>
    <li>This file (when combined with the given <code>a7_main.cpp</code>)
must compile on a department UNIX machine with the
following command:<br>
      <code>g++ a7_main.cpp -lncurses -o a7</code></li>
    <li>
Before evaluation, your<code></code> code must be submitted via <code>turnin</code>,
using the following command on a department UNIX machine:<br>

    <code>turnin --submit dlessin a7 Queue.h</code></li>

  </ul>
  <li><span style="text-decoration: underline;">Graded Elements</span><br>
  </li>
  <ul>
    <li>Preprocessor directives used to prevent multiple inclusion
in <code>Queue.h</code>.</li>
    <li>All <code>Queue</code> member functions defined outside of the
class declaration, but within Queue.h, as described in Section I.</li>
    <li><code>QUEUE_SIZE</code> defined as described in Section I.</li>
    <li>Each member of Queue must be implemented as described in
Section I.<br>
    </li>
    <li>No members beyond those specified in Section I can be included.<br>
    </li>
  </ul>
  <li><span style="text-decoration: underline;">Provisional Dealbreakers</span></li>

<ul>
    
    <li>Due to the importance of proper handling of dynamic memory, you
will lose <span style="font-weight: bold;">50%</span> of your programming assignment grade if
a valgrind evaluation of your work shows any memory leaks or errors <span style="font-style: italic;">other than memory which is "still reachable".</span>&nbsp;
(Due to this assignment's implementation, there will be some memory
listed as "still reachable" in valgrind's leak summary output.&nbsp;
This is completely acceptable, and will not affect your grade.)<br>
    </li>


</ul>
<ul>
<li><span style="font-weight: bold;">However</span>, in recognition
of the difficulty of this task, you may resubmit your work at any time
before the end of the course for regrading on this portion of your
score.&nbsp; (And of course, I'll be happy to help you find and fix any problems.)</li>
<li>Valgrind evaluation is performed as follows:</li>
<ul>
<li>Prepare your executable for valgrind by compiling with
debugging information on and optimization off.&nbsp; Use the following
command for this (Note that "<code>O0</code>" is a capital letter "o"
followed by the number zero.):<br>
&nbsp; <code>g++ -g -O0 a7_main.cpp -lncurses -o a7</code></li>
      <li>Run valgrind by prepending the following to your normal
command (including all normal arguments):<br>
&nbsp; <code>valgrind
--leak-check=yes</code><br>
      </li>

</ul>
</ul>
</ul>


<br>

<hr style="width: 100%; height: 2px;"><br>

<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width: 0pt;" src="./README_files/88x31.png"></a><br>

This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US">Creative
Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License</a>.
</body></html>